//Troy Kay
//CS 3060 X01 Fall 2020
//Assignment 2

/* Promise of Originality
I promise that this source code file has, in it's entirety, been
written by myself and by no other person or persons. If at any time an
exact copy of this source code is found to be used by another person in
this term, I understand that both myself and the student that submitted
the copy will receive a zero on this assignment.
*/

#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<unistd.h>
#include<errno.h>
#include<sys/wait.h>



int main(int argc, char *argv[])
{
        pid_t pid; // Declare pid as type pid_t
        pid = fork(); // Fork a child process


        if (argc == 1) // No arguments
        {
                if (pid == -1) // Error occured
                {
                        fprintf(stderr, "Fork Failed.");
                        EXIT_FAILURE;
                }
                else if (pid == 0) // Child process
                {
                        printf("CHILD started. No artuments provided. Terminating child.\n");
                }
                else // Parent process
                {
                        printf("\n\nPARENT started, now waiting for process ID#%d\n", pid);
                        wait(NULL);
                        printf("PARENT resumed. Child exit code of 0. Now terminating parent.\n\n");
                }
        }
        else if (argc == 2) // One argument
        {
                if (pid == -1) // Error occurred
                {
                        fprintf(stderr, "Fork Failed.");
                        EXIT_FAILURE;
                }
                else if (pid == 0) // Child process
                {
                        printf("CHILD started. One argument provided. Calling execlp(), never to return (sniff):(\n");
                        execlp(argv[1], argv[1], NULL); // System call execlp()
                }
                else // Parent process
                {
                        printf("\n\nPARENT started, now waiting for process ID#%d\n", pid);
                        wait(NULL);
                        printf("PARENT resumed. Child exit code of 0. Now terminating parent.\n\n");
		 }
        }
        else // More than on argument
        {
                if (pid == -1) // Error occured
                {
                        fprintf(stderr, "Fork Failed.");
                        EXIT_FAILURE;
                }
                else if (pid == 0) // Child process
                {
                        printf("CHILD started. More than one argument provided. Calling execvp(), never to return (sniff):(\n");
                        execvp(argv[1], argv + 1); // System call execvp()
                }
                else  // Parent process
                {
                        printf("\n\nPARENT started, now waiting for process ID#%d\n", pid);
                        wait(NULL);
                        printf("PARENT resumed. Child exit code of 0. Now terminating parent.\n\n");
                }
        }
        return 0;

}

